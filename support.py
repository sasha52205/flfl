from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from data.config import admins, secret
from keyboards.inline.support import support_keyboard, support_callback, get_support_manager
from loader import dp, bot

from utils.db_api import quick_commands as commands



@dp.message_handler(Command("support"))
async def ask_support(message: types.Message):
    text = "–•–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
    keyboard = await support_keyboard(messages="one")
    await message.answer(text, reply_markup=keyboard)


@dp.callback_query_handler(support_callback.filter(messages="one"), state='*')
async def send_to_support(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.answer()
    user_id = int(callback_data.get("user_id"))
    print(user_id)

    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    await state.set_state("wait_for_support_message")
    await state.update_data(second_id=user_id)


@dp.message_handler(state="wait_for_support_message", content_types=types.ContentTypes.ANY)
async def get_support_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    second_id = data.get("second_id")
    supports_ids = []
    users = await commands.select_all_supports()
    keyboard = await support_keyboard(messages="one", user_id=message.from_user.id)
    for i in users:
        supports_ids.append(i.id)
    if second_id in supports_ids:
        sup = await commands.select_user(id=second_id)
        await bot.send_message(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª:\n\n'+message.text+f'\n\n'+f'–û–ø–µ—Ä–∞—Ç–æ—Ä:\n @{sup.name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}',
                               chat_id=secret)
        await bot.send_message(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n'
                                    f'#id{message.from_user.id}\n\n'
                                    f'üîΩ   üîΩ   üîΩ', chat_id=second_id)

        await message.copy_to(second_id, reply_markup=keyboard)
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    else:
        sup = await commands.select_user(id=message.from_user.id)
        usr = await commands.select_user(id=second_id)
        await bot.send_message(
            text=f'–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª:\n\n' + message.text + f'\n\n' + f'–û–ø–µ—Ä–∞—Ç–æ—Ä:\n @{sup.name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{usr.name}',
            chat_id=secret)
        await bot.send_message(second_id,
                               f"<b>üìå–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")
        keyboard = await support_keyboard(messages="one", user_id=message.from_user.id)
        await message.copy_to(second_id, reply_markup=keyboard)

        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

    await state.reset_state()

from asyncio import sleep
from typing import List
import re
from aiogram.utils.exceptions import BotBlocked, TelegramAPIError
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart, Text, Command
from aiogram.types import ReplyKeyboardRemove, ContentType, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from data.config import admins, secret
from handlers.users.blocklists import banned, shadowbanned
from keyboards.default.menu_kb import choice_items, return_kb, back_kb
from keyboards.inline.support import support_keyboard, get_support_manager
from loader import dp, bot
from states.states import Test
from utils.db_api import quick_commands as commands
from aiogram_media_group import MediaGroupFilter, media_group_handler
from aiogram.dispatcher.filters import IsReplyFilter, IDFilter

from utils.set_bot_commands import set_bot_commands



@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥"]), state=Test.Q0)
async def add_model(message: types.Message, state: FSMContext):
    await message.answer(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?', reply_markup=choice_items)
    await Test.Q0.set()

@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥"]), state="*")
async def add_model(message: types.Message, state: FSMContext):
    print('–ù–∞–∑–∞–¥')
    statte = await state.get_state()
    print(f'–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {statte}')

    if statte == Test.Q0:
        await message.answer(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?', reply_markup=choice_items)
        print(f'##############################')
        print(f'–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {statte}')
    if statte == None:
        await message.answer(f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?', reply_markup=choice_items)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å')
        print(f'–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {statte}')

    await Test.previous()


@dp.message_handler(Text(equals=["–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä"]))
async def add_modelss(message: types.Message, state: FSMContext):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n'
                         f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?', reply_markup=choice_items)
    await Test.Q0.set()

@dp.message_handler(Text(equals=["–î—Ä—É–≥–æ–µ üéÆ", "–¢–µ–ª–µ—Ñ–æ–Ω üì±", "–ü–ª–∞–Ω—à–µ—Ç üíª", "–ù–æ—É—Ç–±—É–∫ üñ•"]), state=Test.Q0)
async def add_modelsdfg(message: types.Message, state: FSMContext):
    statte = await state.get_state()
    print(f'–ù—É–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! {statte}')

    await message.answer(f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞</b>: {message.text}\n\n"
                         f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏",
                         reply_markup=back_kb)
    # await state.set_state('add_model')
    await state.update_data(item_type=message.text)
    await Test.next()


@dp.message_handler(state=Test.Q1)
async def q1(message: types.Message, state: FSMContext):
    statte = await state.get_state()
    print(f'–ü–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! {statte}')
    answer = message.text
    data = await state.get_data()
    item_type = data.get('item_type')
    await message.answer(f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {item_type}\n"
                         f"<b>–ú–æ–¥–µ–ª—å:</b> {message.text}\n\n"
                         f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞.", reply_markup=back_kb)
    await state.update_data(item_model=answer)
    # await state.set_state('add_ststus')
    await Test.next()


@dp.message_handler(state=Test.Q2)
async def q2(message: types.Message, state: FSMContext):
    statte = await state.get_state()
    print(f'–í—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! {statte}')
    answer = message.text
    await state.update_data(compl=answer)
    data = await state.get_data()
    item_type = data.get('item_type')
    item_model = data.get('item_model')
    await message.answer(f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {item_type}\n"
                         f"<b>–ú–æ–¥–µ–ª—å:</b> {item_model}\n"
                         f"<b>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {message.text}\n\n"
                         f"–£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ -\n\n"
                         f"–†–∞–±–æ—Ç–∞–µ—Ç/–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
                         f"–°–∫–æ–ª—å–∫–æ –±/—É, —Å–∫–æ–ª—ã, –≤–º—è—Ç–∏–Ω—ã?", reply_markup=back_kb)
    # await state.set_state('add_price')
    await Test.next()


@dp.message_handler(state=Test.Q3)
async def q3(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(sost=answer)
    data = await state.get_data()
    item_type = data.get('item_type')
    item_model = data.get('item_model')
    complect = data.get('compl')

    await message.answer(f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {item_type}\n"
                         f"<b>–ú–æ–¥–µ–ª—å:</b> {item_model}\n"
                         f"<b>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {complect}\n"
                         f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b> {message.text}\n\n"
                         f"–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–¥–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?", reply_markup=back_kb)

    # await state.set_state('add_phone')
    await Test.next()


@dp.message_handler(state=Test.Q4)
async def q4(message: types.Message, state: FSMContext):
    answer = message.text
    count = re.findall("\d+", answer)
    print(count)

    if len(count) == 0:
        await message.answer(f"<b>–û–®–ò–ë–ö–ê!</b>\n\n"
                             f"–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")
    elif int(count[0]) <= 0:
        await message.answer(f"<b>–û–®–ò–ë–ö–ê!</b>\n\n"
                             f"–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")
    elif int(count[0]) > 500000:
        await message.answer(f"<b>–û–®–ò–ë–ö–ê!</b>\n\n"
                             f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 000!")
    else:
        await state.update_data(price=answer)

        data = await state.get_data()
        item_type = data.get('item_type')
        item_model = data.get('item_model')
        complect = data.get('compl')
        sost = data.get('sost')
        await message.answer(f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {item_type}\n"
                             f"<b>–ú–æ–¥–µ–ª—å:</b> {item_model}\n"
                             f"<b>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {complect}\n"
                             f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b> {sost}\n"
                             f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {message.text}\n\n"
                             f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏")
        await Test.next()


@dp.message_handler(state=Test.Q5)
async def q5(message: types.Message, state: FSMContext):
    contact = message.text
    answer = message.text
    count = re.findall("\d+", answer)

    if len(count[0]) == 11:
        await state.update_data(phone=answer)
        data = await state.get_data()
        item_type = data.get('item_type')
        item_model = data.get('item_model')
        complect = data.get('compl')
        sost = data.get('sost')
        price = data.get('price')
        await message.answer(f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {item_type}\n"
                             f"<b>–ú–æ–¥–µ–ª—å:</b> {item_model}\n"
                             f"<b>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {complect}\n"
                             f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b> {sost}\n"
                             f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price}\n"
                             f"–ù–æ–º–µ—Ä: {contact}\n\n"
                             f"–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?")
        await Test.next()

    else:
        await message.answer(f"<b>–û–®–ò–ë–ö–ê!</b>\n\n"
                             f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä–µ—Ç–∫–Ω–æ!\n"
                             f"–£–∫–∞–∂–∏—Ç–µ 11 —Ü–∏—Ñ—Ä –±–µ–∑ –∑–Ω–∞–∫–∞ +")


@dp.message_handler(state=Test.Q6)
async def get_contact(message: types.Message, state: FSMContext):
    data = await state.get_data()
    item_type = data.get('item_type')
    item_model = data.get('item_model')
    complect = data.get('compl')
    sost = data.get('sost')
    price = data.get('price')
    contact = data.get('phone')
    user_text = (
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {item_type}\n"
        f"<b>–ú–æ–¥–µ–ª—å:</b> {item_model}\n"
        f"<b>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {complect}\n"
        f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b> {sost}\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price}\n"
        f"<b>–ù–æ–º–µ—Ä:</b> +{contact}\n"
        f"<b>–ì–æ—Ä–æ–¥</b> {message.text}\n"
    )
    await state.update_data(text=user_text)
    await message.answer(f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {item_type}\n"
                         f"<b>–ú–æ–¥–µ–ª—å:</b> {item_model}\n"
                         f"<b>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞:</b> {complect}\n"
                         f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b> {sost}\n"
                         f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price}\n"
                         f"<b>–ù–æ–º–µ—Ä:</b> {contact}\n\n"
                         f"<b>–ì–æ—Ä–æ–¥</b> {message.text}\n"
                         f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ 3-5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–≤ –≤–∏–¥–µ –∞–ª—å–±–æ–º), —Ç.–µ. –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
    await Test.next()


@dp.message_handler(MediaGroupFilter(), content_types=ContentType.PHOTO, state=Test.Q7)
@media_group_handler
async def album_handler(messages: List[types.Message], state: FSMContext):
    album = types.MediaGroup()
    obj = []

    data = await state.get_data()
    text = data.get("text")
    for message in messages:
        obj.append(message.photo[-1].file_id)
    album.attach_photo(photo=obj[0], caption=text + f'<b>User:</b> @{message.from_user.username}'
                       , parse_mode="HTML")
    alb = obj[1:]
    for photo in alb:
        album.attach_photo(photo=photo)
    await state.update_data(alb=album)

   # mes = await message.answer_media_group(media=album)

    if message.from_user.id in banned:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞ –∏ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.")
    elif message.from_user.id in shadowbanned:
        return
    else:
        await state.set_state("wait_for_support_message")
        # await state.update_data(second_id=message.from_user.id)
        data = await state.get_data()
        second_id = data.get("second_id")

        suppotr_id = await get_support_manager()
        # await bot.send_message(suppotr_id,
        #                       f"–í–∞–º –ø–∏—Å—å–º–æ! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")
        keyboard = await support_keyboard(messages="one", user_id=message.from_user.id)
        # await message.copy_to(second_id, reply_markup=keyboard)

        # await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        await state.reset_state()

        await bot.send_media_group(chat_id=suppotr_id, media=album)
        await bot.send_message(chat_id=suppotr_id,
                               text=f'üîº   üîº   üîº\n\n'
                                    f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n@{message.from_user.username}\n'
                                    f'#id{message.from_user.id}', reply_markup=keyboard)
        await bot.send_media_group(chat_id=secret, media=album)
        await bot.send_message(chat_id=secret,
                               text=f'üîº   üîº   üîº\n\n'
                                    f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n@{message.from_user.username}\n'
                                    f'#id{message.from_user.id}')
        await message.answer("–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫. –û–∂–∏–¥–∞–π—Ç–µ —Å–ø–∞—Å–∏–±–æ!", reply_markup=return_kb)
    await state.finish()


@dp.message_handler(content_types=types.ContentType.PHOTO, state=Test.Q7)
async def get_file_id_p(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞!")


# admin


def extract_id(message: types.Message) -> int:
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π (entities) –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É –≤ –æ—Ç–≤–µ—á–∞–µ–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    entities = message.reply_to_message.entities or message.reply_to_message.caption_entities
    # –ï—Å–ª–∏ –≤—Å—ë —Å–¥–µ–ª–∞–Ω–æ –≤–µ—Ä–Ω–æ, —Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è (–∏–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è) —Å—É—â–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö—ç—à—Ç–µ–≥–æ–º...
    if not entities or entities[-1].type != "hashtag":
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞!")

    # ... –±–æ–ª–µ–µ —Ç–æ–≥–æ, —Ö—ç—à—Ç–µ–≥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥ #id123456, –≥–¥–µ 123456 ‚Äî ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    hashtag = entities[-1].get_text(message.reply_to_message.text or message.reply_to_message.caption)
    if len(hashtag) < 4 or not hashtag[3:].isdigit():  # –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ #id, –ª–∏–±–æ #id–ù–ï–¶–ò–§–†–´
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞!")

    return hashtag[3:]


@dp.message_handler(IsReplyFilter(is_reply=True), IDFilter(chat_id=admins[0]), content_types=types.ContentTypes.ANY)
async def reply_to_user(message: types.Message):
    """
    –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç–æ–º).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ copy_message, –ø–æ—ç—Ç–æ–º—É –æ—Ç–≤–µ—Ç–∏—Ç—å –º–æ–∂–Ω–æ —á–µ–º —É–≥–æ–¥–Ω–æ, —Ö–æ—Ç—å –æ–ø—Ä–æ—Å–æ–º.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞, —è–≤–ª—è—é—â–µ–µ—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    try:
        user_id = extract_id(message)
    except ValueError as ex:
        return await message.reply(str(ex))

    # –í—ã—Ä–µ–∑–∞–µ–º ID –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è.
    # –í —Ç–µ–æ—Ä–∏–∏, —ç—Ç–æ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —á–µ—Ä–µ–∑ errors_handler, –Ω–æ –º–Ω–µ —Ç–∞–∫ –Ω–∞–≥–ª—è–¥–Ω–µ–µ

    try:
        await message.copy_to(user_id)

    except BotBlocked:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞—Ç—É, —Ç.–∫. –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∏—Ö —Å—Ç–æ—Ä–æ–Ω–µ")
    except TelegramAPIError as ex:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞—Ç—É! –û—à–∏–±–∫–∞: {ex}")

